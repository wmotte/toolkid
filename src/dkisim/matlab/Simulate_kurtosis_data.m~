function Simulate_kurtosis_data

g = Get_gradients;
bval_1 = 1000;
bval_2 = 2500;
NrB0 = 1;
SNR = inf;
B0 = 10000;
outlier = 1;

FA = 0.7;
MD = 0.0007;

el1 = 0;
az1 = 0;
f1 = 0.5;

el2 = 0;
az2 = 90;
f2 = 0.5;


[S1,D1] = Simulate_diffusion_tensor_signal(FA, MD, bval_1, B0, g, el1, az1, NrB0);
[S2,D2] = Simulate_diffusion_tensor_signal(FA, MD, bval_1, B0, g, el2, az2, NrB0);
S_bval_1 = (f1*S1+f2*S2)/(f1+f2);

[S1,D1] = Simulate_diffusion_tensor_signal(FA, MD, bval_2, B0, g, el1, az1, NrB0);
[S2,D2] = Simulate_diffusion_tensor_signal(FA, MD, bval_2, B0, g, el2, az2, NrB0);
S_bval_2 = (f1*S1+f2*S2)/(f1+f2);

S = [S_bval_1(NrB0+1:end); S_bval_2(NrB0+1:end)];

S = [repmat(B0,[NrB0 1]); S];

Sn = Add_noise_to_DWIs(S,SNR,outlier);



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [S,D] = Simulate_diffusion_tensor_signal(FA, MD, bval, S0, g, el, az, NrB0)

FA = FA * sqrt( 3 );
L1 = ( 3 * MD * (3 + FA * sqrt( 9 - 2 * FA^2 ) ) ) / (9 - 2 * FA^2 + FA * sqrt( 9 - 2 * FA^2 ) );
L2 = ( 3 * MD * (3 - FA^2 ) ) / ( 9 - 2 * FA^2 + FA * sqrt( 9 - 2 * FA^2 ) );
L3 = L2;

D = [L1 0 0; 0 L2 0; 0 0 L3];

R_az = [ cos( az ) -sin( az ) 0; sin( az ) cos( az ) 0; 0 0 1 ];
R_el = [ cos( el )  0 sin( el ); 0 1 0; -sin( el ) 0 cos( el ) ];

D = R_az * R_el * D * R_el' * R_az';

X = g(:,1);
Y = g(:,2);
Z = g(:,3);

S = S0 * exp( -bval * [ X.^2  Y.^2  Z.^2  2.*X.*Y 2.*X.*Z  2.*Y.*Z] * ...
                      [ D(1,1) D(2,2) D(3,3) D(1,2) D(1,3) D(2,3) ]');

S = [repmat( S0, [ NrB0 1 ] ); S ];  


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function Sn = Add_noise_to_DWIs(S,SNR,outlier)

if isinf(SNR)
    Sn=S;
else 
    noise_sigma = S(1)/SNR;
    Sn = sqrt((S + noise_sigma*randn(size(S))).^2 + (noise_sigma*randn(size(S))).^2);
    
end

if outlier==1
    per1 = 0.2; %[0 1] (percent corrupted)
    I = randi(length(S),round(length(S)*per1),1);
    per2 = 2; %[0 1] (percent increase/decrease)
    Si = randn(length(I),1)>0; 
    Sn(I(Si)) = Sn(I(Si))*per2;
    Sn(I(~Si)) = Sn(I(~Si))/per2;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function g = Get_gradients

g = [1,0,0;0.166000000000000,0.986000000000000,0;-0.110000000000000,0.664000000000000,0.740000000000000;0.901000000000000,-0.419000000000000,-0.110000000000000;-0.169000000000000,-0.601000000000000,0.781000000000000;-0.815000000000000,-0.386000000000000,0.433000000000000;0.656000000000000,0.366000000000000,0.660000000000000;0.582000000000000,0.800000000000000,0.143000000000000;0.900000000000000,0.259000000000000,0.350000000000000;0.693000000000000,-0.698000000000000,0.178000000000000;0.357000000000000,-0.924000000000000,-0.140000000000000;0.543000000000000,-0.488000000000000,-0.683000000000000;-0.525000000000000,-0.396000000000000,0.753000000000000;-0.639000000000000,0.689000000000000,0.341000000000000;-0.330000000000000,-0.0130000000000000,-0.944000000000000;-0.524000000000000,-0.783000000000000,0.335000000000000;0.609000000000000,-0.0650000000000000,-0.791000000000000;0.220000000000000,-0.233000000000000,-0.947000000000000;-0.00400000000000000,-0.910000000000000,-0.415000000000000;-0.511000000000000,0.627000000000000,-0.589000000000000;0.414000000000000,0.737000000000000,0.535000000000000;-0.679000000000000,0.139000000000000,-0.721000000000000;0.884000000000000,-0.296000000000000,0.362000000000000;0.262000000000000,0.432000000000000,0.863000000000000;0.0880000000000000,0.185000000000000,-0.979000000000000;0.294000000000000,-0.907000000000000,0.302000000000000;0.887000000000000,-0.0890000000000000,-0.453000000000000;0.257000000000000,-0.443000000000000,0.859000000000000;0.0860000000000000,0.867000000000000,-0.491000000000000;0.863000000000000,0.504000000000000,-0.0250000000000000];
